============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collected 412 items

http_tests/admin_http_test.py ....F.....                                 [  2%]
http_tests/auth_http_test.py .......FF....FF...                          [  6%]
http_tests/channel_http_test.py ....FFFF...FFFFF...F..FF..FFF..FF...FFF. [ 16%]
...F.....F                                                               [ 18%]
http_tests/channels_http_test.py ..F..FF....                             [ 21%]
http_tests/dm_http_test.py ...F..F.FF..F.F..........FF.....              [ 29%]
http_tests/echo_http_test.py F                                           [ 29%]
http_tests/message_http_test.py ....FFF......F...................F....FF [ 39%]
F                                                                        [ 39%]
http_tests/other_http_test.py ....F..F                                   [ 41%]
http_tests/user_http_test.py F.............F.                            [ 45%]
http_tests/users_http_test.py .F                                         [ 45%]
tests/echo_test.py ..                                                    [ 46%]
tests/test_admin.py ...........                                          [ 49%]
tests/test_auth.py ...............                                       [ 52%]
tests/test_channel.py .................................................. [ 64%]
....                                                                     [ 65%]
tests/test_channels.py ...........                                       [ 68%]
tests/test_dm.py ................................                        [ 76%]
tests/test_message.py ...........................................        [ 86%]
tests/test_other.py ..............................                       [ 93%]
tests/test_user.py ......................                                [ 99%]
tests/test_users.py ...                                                  [100%]

=================================== FAILURES ===================================
_________________________ test_admin_user_remove_valid _________________________

clear_database = None
user_1 = {'auth_user_id': 5, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUsImxvZ2luX3RpbWUiOjE2MTgyNTQ3NTAsInNhbHQiOiJmNmI0ZmEzNy0xYWNhLTQzOGYtODEwOS0yMWQ0NDlkZmY2NmUifQ.WHzvKpX4txXmcKSy8dUBWBDzygVYxzwsJ3kDjzneHLE'}
user_2 = {'auth_user_id': 6, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjYsImxvZ2luX3RpbWUiOjE2MTgyNTQ3NTAsInNhbHQiOiI5MjY4NDAxMC0xZWMwLTRjNzItOTE5Yy00NmEzYTk0ODg5ZWIifQ.2tMPGFgJ579FjhRtztOzNxAoaNt8NtVvCgN5NYsBInM'}
channel_1 = 7

    def test_admin_user_remove_valid(clear_database, user_1, user_2, channel_1):
    
        #To test this funciton. User 2 needs to first join a channel and send a message.
        #After funciton is performed: two things must occur:
        #   1: User's name must be changed to "Removed User" - tested through user/profile
        #   2: User's messages must be changed to "Removed User"
    
        requests.post(config.url + 'channel/join/v2', json={
            'token': user_2['token'],
            'channel_id': channel_1
        })
    
        channel_msg = requests.post(config.url + 'message/send/v2', json={
            'token': user_2['token'],
            'channel_id': channel_1,
            'message': 'I just joined!!'
        })
    
        requests.delete(config.url + 'admin/user/remove/v1', json={
            'token': user_1['token'],
            'u_id': user_2['auth_user_id'],
        })
    
        users = requests.get(f"{config.url}user/profile/v2?token={user_1['token']}&u_id={user_2['auth_user_id']}")
        users_info = users.json()
>       assert users_info['user']['name_first'] == 'Removed'
E       AssertionError: assert 'Removed user' == 'Removed'
E         - Removed
E         + Removed user

http_tests/admin_http_test.py:120: AssertionError
_________________________ test_register_multiple_users _________________________

clear_database = None

    def test_register_multiple_users(clear_database):
        user_json = requests.post(config.url + 'auth/register/v2', json={
            'email': 'el_barto@gmail.com',
            'password': 'agreatpassword',
            'name_first': 'Bartholomew',
            'name_last': 'Simpson-Cartwright'
        })
        requests.post(config.url + 'auth/register/v2', json={
            'email': 'elbarto@gmail.com',
            'password': 'agreatpassword',
            'name_first': 'Bartholomew',
            'name_last': 'Simpson-Cartwright'
        })
        user = user_json.json()
    
        users_info_json = requests.get(f"{config.url}users/all/v1?token={user['token']}")
        users_info = users_info_json.json()['users']
        assert len(users_info) == 2
        assert users_info[0]['handle_str'] == 'bartholomewsimpson-c'
>       assert users_info[1]['handle_str'] == 'bartholomewsimpson-0'
E       AssertionError: assert 'bartholomewsimpson-c0' == 'bartholomewsimpson-0'
E         - bartholomewsimpson-0
E         + bartholomewsimpson-c0
E         ?                    +

http_tests/auth_http_test.py:121: AssertionError
_______________________________ test_login_valid _______________________________

clear_database = None
user_1 = {'auth_user_id': 26, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUwLCJzYWx0IjoiYTJmZmE0NTQtZDNhNS00OWM2LWIyMTUtOTY2MTE1N2Y3M2Y1In0.r7Od7UlA46_9bdU-DLSut1ky6Ul7j0xiVDX0OoDYsjI'}

    def test_login_valid(clear_database, user_1):
        user = requests.post(config.url + 'auth/login/v2', json={
            'email': 'johnsmith@gmail.com',
            'password': 'goodpass',
        })
    
        user1 = user.json()
>       assert user1['auth_user_id'] == 1
E       assert 26 == 1

http_tests/auth_http_test.py:134: AssertionError
________________________ test_auth_logout_invalid_token ________________________

clear_database = None
user_1 = {'auth_user_id': 32, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjMyLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUwLCJzYWx0IjoiYWMzOThkNmQtMTlmOS00NjNlLWI5NzktYjFhYTFkYjNkOGRlIn0.hGujHsSiRyN99DYwRb4Icvv_DvTUIoqXkmwkvFXHTDA'}

    def test_auth_logout_invalid_token(clear_database, user_1):
        user = requests.post(config.url + 'auth/logout/v1', json={
            'token': INVALID_TOKEN
        })
>       assert user.status_code == ACCESSERROR
E       assert 200 == 403
E        +  where 200 = <Response [200]>.status_code

http_tests/auth_http_test.py:207: AssertionError
____________________________ test_auth_logout_again ____________________________

clear_database = None
user_1 = {'auth_user_id': 33, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjMzLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUwLCJzYWx0IjoiYjVhMzBiZGItOGU4Zi00YTZlLWFhNGEtMTlmZmQ0YWZjMzk4In0.9oMglAqGUQQvmF8oV4rYVlVwuQNohgE9dWGiUtMyDCM'}

    def test_auth_logout_again(clear_database, user_1):
        requests.post(config.url + 'auth/logout/v1', json={
            'token': user_1['token']
        })
        user = requests.post(config.url + 'auth/logout/v1', json={
            'token': user_1['token']
        })
>       assert user.status_code == ACCESSERROR
E       assert 200 == 403
E        +  where 200 = <Response [200]>.status_code

http_tests/auth_http_test.py:216: AssertionError
__________________________ test_invite_duplicate_uid ___________________________

clear_database = None
user_1 = {'auth_user_id': 50, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUwLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUwLCJzYWx0IjoiZjM5YTBjOWItNzdkYS00ZjhmLWFhMjMtZDM4N2NhNTA0ZmVjIn0.X8aeMyS1B2ZCZn3Zph9-FW4fezh2IGzSKSngErWQr1U'}
user_2 = {'auth_user_id': 51, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUxLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUwLCJzYWx0IjoiNzRjMmZhYmMtYzE4ZS00NGEzLWI3ZWEtNmVhZjU4OWQ4ZDc3In0.eyqvKNsLh_Qu2mki8tbJPOYh8fDCul3iIt9ZLZI1Kgg'}
channel_1 = 52

    def test_invite_duplicate_uid(clear_database, user_1, user_2, channel_1):
    
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        channel_details_json = get_channel_details(user_1['token'],channel_1)
    
        channel_details = channel_details_json.json()
        print(channel_details)
    
        assert len(channel_details['owner_members']) == 1
        assert len(channel_details['all_members']) == 2
>       assert channel_details['all_members'][0]['u_id'] == 1
E       assert 51 == 1

http_tests/channel_http_test.py:157: AssertionError
----------------------------- Captured stdout call -----------------------------
{'all_members': [{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', 'profile_img_url': '', 'u_id': 51}, {'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', 'profile_img_url': '', 'u_id': 50}], 'is_public': True, 'name': 'Channel1', 'owner_members': [{'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', 'profile_img_url': '', 'u_id': 50}]}
___________________________ test_invite_valid_inputs ___________________________

clear_database = None
user_1 = {'auth_user_id': 53, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUzLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUwLCJzYWx0IjoiYmY3YTc3ODEtNDdkYy00Y2Y5LWFkYzEtNGU2ZGZjZTFlNzRmIn0._m_TeECoiSie9ZJFEGN0ABkSLe8asKzc8TCtgqdjgs8'}
user_2 = {'auth_user_id': 54, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiMGE3NGEwMDQtMWEyOS00Y2ZlLWI2NjMtMTBjODhjODNkYTFkIn0.t5mb9JDHlZImqiqJHDUzICmcx24HqefPf19b2GxoQw8'}
channel_1 = 55

    def test_invite_valid_inputs(clear_database, user_1, user_2, channel_1):
    
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        channel_details_json = get_channel_details(user_1['token'], channel_1)
        channel_details = channel_details_json.json()
    
    
        assert len(channel_details['owner_members']) == 1
        assert len(channel_details['all_members']) == 2
>       assert channel_details['all_members'][0]['u_id'] == 1
E       assert 53 == 1

http_tests/channel_http_test.py:173: AssertionError
_______________________ test_invite_global_owner_allowed _______________________

clear_database = None
user_1 = {'auth_user_id': 56, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU2LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiZjM3ZmYwNGYtYmY1Ny00NDVhLTgxZGUtMGFlMzc4NjFjNDg4In0.MZaE56wFMaZvC_eu4Gy63xjBH8gWu7fE72eDQA6XaBM'}
user_2 = {'auth_user_id': 57, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU3LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiZTE3NGNmNmMtYTg5NS00OGJiLWFmNzYtOWMwZmFmNGIwNDE4In0.KOUAdR1B9k3mgOafMS-P8_W4iIZA79t2ugPc3UA7swk'}
user_3 = {'auth_user_id': 58, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiNGQyNjQ0M2EtY2FmNi00NzJjLWFkMTktY2E1YTdjYzlmYjY2In0.CUbXz7rG4tsVII3zhCqenXW2tDhImzKWM9zccaIvC94'}
channel_2 = 59

    def test_invite_global_owner_allowed(clear_database, user_1, user_2, user_3, channel_2):
    
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_2,
            'u_id': user_3['auth_user_id']
        })
        channel_details_json = get_channel_details(user_2['token'],channel_2)
        channel_details = channel_details_json.json()
    
        assert len(channel_details['owner_members']) == 1
>       assert len(channel_details['all_members']) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}])

http_tests/channel_http_test.py:187: AssertionError
_______________________ test_invite_global_owner_invited _______________________

clear_database = None
user_1 = {'auth_user_id': 60, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjYwLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiNGVmMTBhYzEtNDc3MC00OWQ5LThlYjAtNmFhMGZlM2Y5NTk4In0.tpEeaFytn4qTeYbMdH6cRv4La_E66gakX8sU27WQEM8'}
user_2 = {'auth_user_id': 61, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjYxLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiMTYwMDU3NjItOTZiNC00ODE5LWE2NjEtYWY1NDgzMGMwNjY5In0.94CzEJQkocYtsiaxKvflCF9jOqmF9SMgeiNGFiRWi1k'}
channel_2 = 62

    def test_invite_global_owner_invited(clear_database, user_1, user_2, channel_2):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_2['token'],
            'channel_id': channel_2,
            'u_id': user_1['auth_user_id']
        })
        channel_details_json = get_channel_details(user_2['token'], channel_2)
    
        channel_details = channel_details_json.json()
    
        assert len(channel_details['owner_members']) == 2
>       assert channel_details['owner_members'][0]['u_id'] == 2
E       assert 61 == 2

http_tests/channel_http_test.py:202: AssertionError
______________________ test_channel_details_owner_allowed ______________________

clear_database = None
user_1 = {'auth_user_id': 70, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjcwLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiNTE3YTcyZDYtYmM0Yi00OTJlLTg1OGMtYjFmOGM4NWZhMTc3In0.PiBU9upAzewsY1RN5R_AinsxFv44gNodLN23rJdAtoA'}
user_2 = {'auth_user_id': 71, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjcxLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiMGQ5MzU0MGUtNjhkNC00YWYxLWFiODMtZmQ4NjI2ZDEzY2UzIn0.rvA14bxD9v3UUoao3PVFc9q4NmSr1_ejmqtBtE0-Mp8'}
channel_1 = 72

    def test_channel_details_owner_allowed(clear_database, user_1, user_2, channel_1):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        channel_details_json = get_channel_details(user_1['token'], channel_1)
        channel_details = channel_details_json.json()
    
>       assert channel_details == expected_output_details_1()
E       AssertionError: assert {'all_members...Smith', ...}]} == {'all_members...Smith', ...}]}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}, {'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ...}]} != {'all_members': [{'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ...}, {'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}]}
E         {'owner_members': [{'email': 'johnsmi...
E         
E         ...Full output truncated (2 lines hidden), use '-vv' to show

http_tests/channel_http_test.py:291: AssertionError
_____________________ test_channel_details_member_allowed ______________________

clear_database = None
user_1 = {'auth_user_id': 73, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjczLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiMmViNmY4ODMtYWIwZi00OWY3LWI0Y2ItYzVkMDU2Y2E2MTkyIn0.c75qczl0J2ZUS5dGUX3o490SPbzkuPl0qTvukPTsd8E'}
user_2 = {'auth_user_id': 74, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjc0LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiYTRjZjJhYTAtYjRmMi00MjVlLWE4ODItNmRhNTA3MzgwNDVkIn0.6Uj9qXI_a2e1wBGhmb33khd8NuNXcPFGRQMBda9Om2I'}
channel_1 = 75

    def test_channel_details_member_allowed(clear_database, user_1, user_2, channel_1):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        channel_details_json = get_channel_details(user_2['token'], channel_1)
        channel_details = channel_details_json.json()
    
>       assert channel_details == expected_output_details_1()
E       AssertionError: assert {'all_members...Smith', ...}]} == {'all_members...Smith', ...}]}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}, {'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ...}]} != {'all_members': [{'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ...}, {'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}]}
E         {'owner_members': [{'email': 'johnsmi...
E         
E         ...Full output truncated (2 lines hidden), use '-vv' to show

http_tests/channel_http_test.py:302: AssertionError
__________________ test_channel_details_global_owner_allowed ___________________

clear_database = None
user_1 = {'auth_user_id': 76, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjc2LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiYzVmOTM2MTQtZjlkOC00MzllLTk3MTgtNzMyMDE1NmNlNjExIn0.4Zw2AvooUl-KKNhngKzBuLgUESmjJb34oLWFIkTWFio'}
user_2 = {'auth_user_id': 77, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjc3LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiZjJhMWZjZmMtZjA2OS00NzdhLWFhMTQtNTJkMjg2NDI4YWI0In0.exNGJAvWNLQI5XN8x3ZXyuipVv7GZ2IuLJJ1Wp0b3cY'}
channel_2 = 78

    def test_channel_details_global_owner_allowed(clear_database, user_1, user_2, channel_2):
        channel_details_json = get_channel_details(user_1['token'], channel_2)
>       channel_details = channel_details_json.json()

http_tests/channel_http_test.py:306: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f0fd69fabe0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view details about this channel</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f0fd7781c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_channel_details_new_channel _______________________

clear_database = None
user_1 = {'auth_user_id': 79, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjc5LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiMGEyN2RiZWEtMTY0ZC00ODYzLWEyYWUtN2Y0YmEwNGZkYjg5In0.8Psf7ZxsIeN7lHxA9S8kUMWMaRLuMdY2xAKJDZCUpTE'}
user_2 = {'auth_user_id': 80, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjgwLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiMTYyYmJjMjQtZGQ4Ny00NzQ5LWI1ZGYtMjUzYjc1MmE0MjljIn0.tJqa_z9iRv3hu2TI2JQ_pGmknnWP44tiEewSBmysTCA'}
channel_2 = 81

    def test_channel_details_new_channel(clear_database, user_1, user_2, channel_2):
        channel_details_json = get_channel_details(user_2['token'], channel_2)
        channel_details = channel_details_json.json()
    
>       assert channel_details == expected_output_details_2()
E       AssertionError: assert {'all_members...'Tran', ...}]} == {'all_members...'Tran', ...}]}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}]} != {'all_members': [{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}]}
E         {'owner_members': [{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}]} != {'owner_members': [{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran',...
E         
E         ...Full output truncated (2 lines hidden), use '-vv' to show

http_tests/channel_http_test.py:314: AssertionError
______________________ test_channel_details_empty_channel ______________________

clear_database = None
user_1 = {'auth_user_id': 82, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjgyLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiNTYxYTE2YWQtMzE2OC00ODc0LTk4MGUtZjdhMjBmZDQyZDRhIn0.5DohAo2hUNQJEgdLvTDysGE-rx7ZqjiUseWqCd_6T4g'}
user_2 = {'auth_user_id': 83, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjgzLCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiMzAxZjg5OTYtYzU5Ny00NjViLWE3NTItYTA3YjE4NTFhNWJkIn0.cCxN9bpCRd7F1QzYPDihW53dwteEKQA5kIMpKkboTWA'}
channel_2 = 84

    def test_channel_details_empty_channel(clear_database, user_1, user_2, channel_2):
        requests.post(config.url + 'channel/leave/v1', json={
            'token': user_2['token'],
            'channel_id': channel_2
        })
        channel_details_json = get_channel_details(user_1['token'], channel_2)
>       channel_details = channel_details_json.json()

http_tests/channel_http_test.py:322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f0fd69fabe0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view details about this channel</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f0fd7781c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________ test_channel_addowner_invalid_uid _______________________

clear_database = None
user_1 = {'auth_user_id': 94, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjk0LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiNGI4Y2Y0M2QtYTQ5ZC00NzEwLWE5MmUtOTgzYTA0NGUzMzEwIn0.1OE2CV2ancQFS_Jn8vk8kI3t5gF_T03rm9WqFlw2s-w'}
user_2 = {'auth_user_id': 95, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjk1LCJsb2dpbl90aW1lIjoxNjE4MjU0NzUxLCJzYWx0IjoiOTZhM2NiZmItNjBlYi00NTE5LTkyOTItZDliN2Y0MDk1NjQ1In0.pTLnVCs-JzZtYgaxhdIvUqfVLAOh93f6KxE17NC5Szs'}
channel_1 = 96

    def test_channel_addowner_invalid_uid(clear_database, user_1, user_2, channel_1):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        addowner = requests.post(config.url + 'channel/addowner/v1', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': INVALID_UID
        })
    
>       assert addowner.status_code == ACCESSERROR
E       assert 400 == 403
E        +  where 400 = <Response [400]>.status_code

http_tests/channel_http_test.py:387: AssertionError
__________________ test_channel_addowner_global_owner_allowed __________________

clear_database = None
user_1 = {'auth_user_id': 103, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEwMywibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6ImE5Zjk5ZGZlLThmNzUtNDc4Zi05ZTExLTliMjUzMWMzMWVjOSJ9.2mybWseNIUFO7BcfVFoLbOQemV9r0hqW5zKk8WLrTPc'}
user_2 = {'auth_user_id': 104, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEwNCwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6ImMyMzUxMzFmLTMxMDEtNGVhNi1hYjAxLTViMzAzMTM3YWIzMCJ9.KxFUY_QZ21xRYGKR7u7PfBOzQsHsLqrdqHTA75Og3wA'}
channel_2 = 105

    def test_channel_addowner_global_owner_allowed(clear_database, user_1, user_2, channel_2):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_2['token'],
            'channel_id': channel_2,
            'u_id': user_1['auth_user_id']
        })
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': user_1['token'],
            'channel_id': channel_2,
            'u_id': user_1['auth_user_id']
        })
        channel_details_json = get_channel_details(user_2['token'], channel_2)
        channel_details = channel_details_json.json()
    
        assert channel_details['name'] == "Phil's Channel"
        assert channel_details['is_public'] == True
        assert len(channel_details['owner_members']) == 2
>       assert channel_details['owner_members'][0]['u_id'] == 2
E       assert 104 == 2

http_tests/channel_http_test.py:434: AssertionError
______________________ test_channel_addowner_valid_inputs ______________________

clear_database = None
user_1 = {'auth_user_id': 106, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEwNiwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6IjYyMTcxYjZhLWQ4ZTMtNGE4Yy04NzEzLTVlNTk4MGU3NzI5ZSJ9.cFCqXBbDxlvB8Plxqv3_oTVzXdHBJMNBxzxV2kqREVI'}
user_2 = {'auth_user_id': 107, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEwNywibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6IjhhNTI4YjdjLWZlYWMtNGMzNS1hZWRhLTAyMWNiNTcwNmY5MSJ9.iMRPr9eK9IbJ4FvDz7d3-N9rRjp2BjRpL4WzBQBMpTM'}
channel_1 = 108, make_user_2_owner_in_channel_1 = None

    def test_channel_addowner_valid_inputs(clear_database, user_1, user_2, channel_1, make_user_2_owner_in_channel_1):
        channel_details_json = get_channel_details(user_1['token'], channel_1)
        channel_details = channel_details_json.json()
    
        assert channel_details['name'] == "Channel1"
        assert channel_details['is_public'] == True
        assert len(channel_details['owner_members']) == 2
>       assert channel_details['owner_members'][0]['u_id'] == 1
E       assert 106 == 1

http_tests/channel_http_test.py:447: AssertionError
___________________ test_channel_removeowner_invalid_auth_id ___________________

clear_database = None
user_1 = {'auth_user_id': 115, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjExNSwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6IjU4ODcwYmQ2LTM1YTctNGNjMS05YmEyLTVlNDM2YjlmNzNmNiJ9.Umixlm5WBt-jsOOW5JJB8B2PD-8Mo5JNveQEMw-kwv4'}
user_2 = {'auth_user_id': 116, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjExNiwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6ImRhZjkxYWRkLWNmOTMtNGY4OC05NDQ0LWE4YmJhMmNjYWRlMSJ9.0LuDdorilB-nhN6PU7J5u0a_h5l04Fbh4g9BINdZbYU'}
channel_1 = 117

    def test_channel_removeowner_invalid_auth_id(clear_database, user_1, user_2, channel_1):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        removeowner = requests.post(config.url + 'channel/removeowner/v1', json={
            'token': user_2['token'],
            'channel_id': channel_1,
            'u_id': user_1['auth_user_id']
        })
    
>       assert removeowner.status_code == INPUTERROR
E       assert 403 == 400
E        +  where 403 = <Response [403]>.status_code

http_tests/channel_http_test.py:487: AssertionError
_____________________ test_channel_removeowner_invalid_uid _____________________

clear_database = None
user_1 = {'auth_user_id': 118, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjExOCwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6IjcyMmMxMjQ5LWMxY2UtNDRiZi1iMDA2LTdmOWZiZjRhMzA0OCJ9.LxcoQxw4ePe9LzkF8cM_zf6ok4zGX5dSKHoAECaUHeE'}
user_2 = {'auth_user_id': 119, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjExOSwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6ImYyYzE0NzRjLWQ0ZWYtNGE2Yy05MWE5LWFmZTJmZjZjMjlmMSJ9._gzdH2XYgWVuagWsGpuTutRbGc06f_hHS_t48Ozb5XA'}
channel_1 = 120

    def test_channel_removeowner_invalid_uid(clear_database, user_1, user_2, channel_1):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        removeowner = requests.post(config.url + 'channel/removeowner/v1', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': INVALID_UID
        })
    
>       assert removeowner.status_code == ACCESSERROR
E       assert 400 == 403
E        +  where 400 = <Response [400]>.status_code

http_tests/channel_http_test.py:501: AssertionError
__________________ test_channel_removeowner_auth_id_not_owner __________________

clear_database = None
user_1 = {'auth_user_id': 121, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEyMSwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6ImMyNjFjYmU4LTdmYjAtNDVmNi05OWQxLThlZTNiZWVjY2UzNyJ9.5kJPUfuHPFR10Ml8diJfHtkXKSdBNCHoYR-Nur3Hu3U'}
user_2 = {'auth_user_id': 122, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEyMiwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6Ijc2NzlhNzk1LTU4NGItNDg0Ny1iYTQyLTJhYmI4YmIyNmZkZSJ9.nifOLS7HA5d39w05X4hxjzjVddLdhk8qYQJBG581BaU'}
channel_1 = 123

    def test_channel_removeowner_auth_id_not_owner(clear_database, user_1, user_2, channel_1):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        removeowner = requests.post(config.url + 'channel/removeowner/v1', json={
            'token': user_2['token'],
            'channel_id': channel_1,
            'u_id': user_1['auth_user_id']
        })
    
>       assert removeowner.status_code == INPUTERROR
E       assert 403 == 400
E        +  where 403 = <Response [403]>.status_code

http_tests/channel_http_test.py:515: AssertionError
____________________ test_channel_removeowner_valid_inputs _____________________

clear_database = None
user_1 = {'auth_user_id': 129, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEyOSwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6IjNkOTM5YmQzLTAwYzAtNDQ5NS1iNzU0LTBmY2RkYTE2ZDkxNCJ9.TOUNTqDftEZMIwwx0-fmtuoyJklSMYHNYiJzVL6Q-Yc'}
user_2 = {'auth_user_id': 130, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEzMCwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6ImZhMjRjOWJmLTNlZDEtNDhkMS05YTljLWYxNGExM2IyNGU4ZCJ9.IJ5TmnFGBPDONdjYT_LpIptJBfWHhSKGWzxDHNpTTJc'}
channel_1 = 131, make_user_2_owner_in_channel_1 = None

    def test_channel_removeowner_valid_inputs(clear_database, user_1, user_2, channel_1, make_user_2_owner_in_channel_1):
        requests.post(config.url + 'channel/removeowner/v1', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        channel_details_json = get_channel_details(user_1['token'], channel_1)
        channel_details = channel_details_json.json()
    
        assert len(channel_details['owner_members']) == 1
>       assert channel_details['owner_members'][0]['u_id'] == 1
E       assert 129 == 1

http_tests/channel_http_test.py:550: AssertionError
________________ test_channel_removeowner_global_owner_allowed _________________

clear_database = None
user_1 = {'auth_user_id': 132, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEzMiwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6ImNkODE3NWJmLWRiNzMtNDIyMi05ODEyLWI1YWY5MGRkOGRkNCJ9.CcdZbsvyex5Xz3AiVfu88eF0cw93aw4NMsw3KIg6pYc'}
user_2 = {'auth_user_id': 133, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEzMywibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6IjI2Mjg0ZDM2LTY3YmYtNDE4Yi1hNjIxLTI3M2Y0YTRhZmZkYiJ9.sBUTY0U1ruwwIRfAdABwG9kPGMZW_rSNnSTQb1cMuuY'}
user_3 = {'auth_user_id': 134, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEzNCwibG9naW5fdGltZSI6MTYxODI1NDc1MSwic2FsdCI6IjcwZGRlMmNkLTZlNjgtNDEwOC1hNTM4LWExNmFkM2ZjZDVkYyJ9.17XR7iASk82zNl2PTBlWvbYi3TVczpgpO4kWmGpyAf8'}
channel_2 = 135

    def test_channel_removeowner_global_owner_allowed(clear_database, user_1, user_2, user_3,channel_2):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_2['token'],
            'channel_id': channel_2,
            'u_id': user_3['auth_user_id']
        })
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': user_2['token'],
            'channel_id': channel_2,
            'u_id': user_3['auth_user_id']
        })
        requests.post(config.url + 'channel/removeowner/v1', json={
            'token': user_1['token'],
            'channel_id': channel_2,
            'u_id': user_3['auth_user_id']
        })
        channel_details_json = get_channel_details(user_2['token'], channel_2)
        channel_details = channel_details_json.json()
    
        assert len(channel_details['owner_members']) == 1
>       assert channel_details['owner_members'][0]['u_id'] == 2
E       assert 133 == 2

http_tests/channel_http_test.py:575: AssertionError
__________________________ test_channel_leave_member ___________________________

clear_database = None
user_1 = {'auth_user_id': 143, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE0MywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImJiMDcyYWE5LTgxNTEtNDhiMC04ZTkyLTViMjA0NzQ0MmRkNSJ9.IZ5ib296t1RB0SgHwUqFqj2jnQW0PVIenZSuB5q3_kg'}
user_2 = {'auth_user_id': 144, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE0NCwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImYwYzMxOTE4LWM2MmQtNDYxZS04ZDJkLWY3ZjJiOTg4ZmRiNSJ9.Y4tS5a1IFXlJa3B1WAPPzThydMwtszg5e0wJM9BxFMk'}
channel_1 = 145

    def test_channel_leave_member(clear_database, user_1, user_2, channel_1):
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        requests.post(config.url + 'channel/leave/v1', json={
            'token': user_2['token'],
            'channel_id': channel_1,
        })
        channel_details_json = get_channel_details(user_1['token'], channel_1)
        channel_details = channel_details_json.json()
    
        assert channel_details['name'] == "Channel1"
        assert channel_details['is_public'] == True
        assert len(channel_details['owner_members']) == 1
>       assert channel_details['owner_members'][0]['u_id'] == 1
E       assert 143 == 1

http_tests/channel_http_test.py:625: AssertionError
___________________________ test_channel_leave_owner ___________________________

clear_database = None
user_1 = {'auth_user_id': 146, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE0NiwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImY2N2UyZGMxLWJmYzctNDY2MC05MTdmLTZmYmNiNDJkMWQwMSJ9.rbulM0baBURWXRczZSDDi733XYt2xVfkggi_W-Q0syA'}
user_2 = {'auth_user_id': 147, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE0NywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImM5NjQ4ZDIzLTY3OTgtNGNmYS1iOTA2LTNhOTNlMWFjYWM2MyJ9.2o2AqZTvSMTDPBaiCaxal7hOw1YBb2hXMqanJAHlSJ8'}
channel_1 = 148, make_user_2_owner_in_channel_1 = None

    def test_channel_leave_owner(clear_database, user_1, user_2, channel_1, make_user_2_owner_in_channel_1):
        requests.post(config.url + 'channel/leave/v1', json={
            'token': user_2['token'],
            'channel_id': channel_1,
        })
        channel_details_json = get_channel_details(user_1['token'], channel_1)
        channel_details = channel_details_json.json()
    
        assert channel_details['name'] == "Channel1"
        assert channel_details['is_public'] == True
>       assert len(channel_details['owner_members']) == 1
E       AssertionError: assert 2 == 1
E        +  where 2 = len([{'email': 'philtran@gmail.com', 'handle_str': 'philiptran', 'name_first': 'Philip', 'name_last': 'Tran', ...}, {'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ...}])

http_tests/channel_http_test.py:639: AssertionError
_________________________ test_channel_leave_last_user _________________________

clear_database = None
user_1 = {'auth_user_id': 149, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE0OSwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6Ijg3M2JkNTlkLTZjOTctNDcyNS04OWUyLWIxODIzNzY4ZmQ2OCJ9.of3zRmUcOAkboSZR0V-IrZsyx313_IM-kWWDeeVzfYs'}
channel_1 = 150

    def test_channel_leave_last_user(clear_database, user_1, channel_1):
        requests.post(config.url + 'channel/leave/v1', json={
            'token': user_1['token'],
            'channel_id': channel_1,
        })
        channel_details_json = get_channel_details(user_1['token'], channel_1)
>       channel_details = channel_details_json.json()

http_tests/channel_http_test.py:650: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f0fd69fabe0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view details about this channel</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f0fd7781c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_channel_join_already_joined _______________________

clear_database = None
user_1 = {'auth_user_id': 161, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE2MSwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6Ijc3Yzg1ZWZlLWNmNWQtNGQ2ZC04YThmLTNjNmYzODhkYjUzNiJ9.ueUnZJrx2i5c9cpSqY5wD7-Gd1Ep3rtxIYQ5oAB8g-I'}
user_2 = {'auth_user_id': 162, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE2MiwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjQ3YTQ2MzBjLTYwZTEtNDIzMi05YjljLWNkODkwNzhkZjk0NiJ9.IQXWS5gM4gl3vobP08Ir4kFpCheYOn9uGGxzEUfUuU8'}
channel_1 = 163

    def test_channel_join_already_joined(clear_database, user_1, user_2, channel_1):
    
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'u_id': user_2['auth_user_id']
        })
        chan = requests.post(config.url + 'channel/join/v2', json={
            'token': user_2['token'],
            'channel_id': channel_1
        })
>       channels = chan.json()

http_tests/channel_http_test.py:711: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f0fd69fabe0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>philiptran is already a member of Channel1</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f0fd7781c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________________ test_channel_messages_join __________________________

clear_database = None
user_1 = {'auth_user_id': 175, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE3NSwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjY0MDI2MjlhLWUyNTEtNDlkYy04MDFmLWJhOWJjYzY5OTc5MyJ9.60ZdUGPDSjuQqhkOpODct6hvxVqG3UIr1i4XLRg1JIo'}
user_2 = {'auth_user_id': 176, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE3NiwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImI0MDg2MDVkLWM5N2MtNDcwMC05MWQzLTY2MTU2N2QyODVkOSJ9.tfaDS9O5Fnps5tbCTX8mzZbjAbWhNSRvaUNB3tVqy1w'}
channel_1 = 177

    def test_channel_messages_join(clear_database, user_1, user_2, channel_1):
    
        requests.post(config.url + 'channel/join/v2', json={
            'token': user_2['token'],
            'channel_id': channel_1,
        })
        requests.post(config.url + 'message/send/v2', json={
            'token': user_2['token'],
            'channel_id': channel_1,
            'message': "I'm now in the channel."
        })
        chan = get_channel_messages(user_2['token'], channel_1, 0)
    
        chan_info = chan.json()
        assert len(chan_info['messages']) == 1
>       assert chan_info['messages'][0]['message_id'] == 1
E       assert 178 == 1

http_tests/channel_http_test.py:772: AssertionError
__________________________ test_channel_listall_valid __________________________

clear_database = None
user_1 = {'auth_user_id': 182, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE4MiwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImVlOWM5MGI3LWZjN2QtNDNlNS05ZmQ1LWFiNWM0NTc5MGExYyJ9.R49YKeLT56imPcG2zj82T_iZe8a-ihIRmV4uY_PhxFk'}
user_2 = {'auth_user_id': 183, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE4MywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjcyYTVlZTVlLTEyZjctNGNhMy1iZTEzLWYxYzI0ZjE4ZWE0ZSJ9.SHAM6qqUN4zWNJm0G9c3wVBBel-G_T_x8TYI2tGxlwg'}
channel_1 = 184, channel_2 = 185

    def test_channel_listall_valid(clear_database, user_1, user_2, channel_1, channel_2):
        chan = get_channels_listall(user_1['token'])
    
        chan_list = chan.json()
>       assert chan_list == expected_output_listall_v2()
E       AssertionError: assert {'channels': ... 'Channel2'}]} == {'channels': ... 'Channel2'}]}
E         Differing items:
E         {'channels': [{'channel_id': 184, 'name': 'Channel1'}, {'channel_id': 185, 'name': 'Channel2'}]} != {'channels': [{'channel_id': 1, 'name': 'Channel1'}, {'channel_id': 2, 'name': 'Channel2'}]}
E         Use -v to get the full diff

http_tests/channels_http_test.py:101: AssertionError
___________________________ test_channel_list_valid ____________________________

clear_database = None
user_1 = {'auth_user_id': 189, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE4OSwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjQ0OTBhYzFjLTM1NDUtNDYwMS04NDkxLWIxZjk5ZDFlZjdiNyJ9.3kOaVfSuj2XjNZoM2FFBJ5dFWGfuzw6v5Igh6JeFCn0'}
user_2 = {'auth_user_id': 190, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE5MCwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjRkZGNlNTcxLTBiNDAtNDIzNy04ODgzLTIxYmQxZDQ1ZjBkOSJ9.Y4xk6l0wPtxMUhsm4MMoSkMBUKfsptMFX9nh2pKvkPU'}
channel_1 = 191, channel_2 = 192

    def test_channel_list_valid(clear_database, user_1, user_2, channel_1, channel_2):
        chan = get_channels_list(user_1['token'])
    
        chan_list = chan.json()
>       assert chan_list == expected_output_list_v2()
E       AssertionError: assert {'channels': ... 'Channel1'}]} == {'channels': ... 'Channel1'}]}
E         Differing items:
E         {'channels': [{'channel_id': 191, 'name': 'Channel1'}]} != {'channels': [{'channel_id': 1, 'name': 'Channel1'}]}
E         Use -v to get the full diff

http_tests/channels_http_test.py:133: AssertionError
______________________ test_valid_channels_create_v1_u_id ______________________

clear_database = None
user_1 = {'auth_user_id': 193, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE5MywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjM0MmI4ZDAwLTJiNTMtNGJhZC04M2NmLWMzYWM5YTAzYjM2ZSJ9.TZn0HsJKdh3NVg2VRT0eaX-yPeb7Lod1ISrJDXAIY74'}

    def test_valid_channels_create_v1_u_id(clear_database,user_1):
        chan = requests.post(config.url + 'channels/create/v2', json={
           'token': user_1['token'],
           'name': "ValidChannelName",
           'is_public': True
        })
    
        chan_id = chan.json()
>       assert(chan_id == {'channel_id': 1})
E       AssertionError: assert {'channel_id': 194} == {'channel_id': 1}
E         Differing items:
E         {'channel_id': 194} != {'channel_id': 1}
E         Use -v to get the full diff

http_tests/channels_http_test.py:147: AssertionError
____________________________ test_dm_details_valid _____________________________

clear_data = None
test_user1 = {'auth_user_id': 213, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIxMywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjA3ZWYxODYwLTlmOTAtNDc4OC1hNjJkLTA1ZjQ4MmE3ZjMxYyJ9.NA5Oo5981565Z0y7yM1mhpAzFlmIf8LkgrpgPgJLpVU'}
test_create_dm = {'dm_id': 215, 'dm_name': 'dansmith, validnamevalidname'}

    def test_dm_details_valid(clear_data,test_user1,test_create_dm):
        dm_det = requests.get(f"{config.url}dm/details/v1?token={test_user1['token']}&dm_id={test_create_dm['dm_id']}")
        dm_info = dm_det.json()
>       assert dm_info == expected_output_details_v2()
E       AssertionError: assert {'members': [...amevalidname'} == {'members': [...amevalidname'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'members': [{'email': 'dan@gmail.com', 'handle_str': 'dansmith', 'name_first': 'dan', 'name_last': 'smith', ...}, {'email': 'validemail@g.com', 'handle_str': 'validnamevalidname', 'name_first': 'validname', 'name_last': 'validname', ...}]} != {'members': [{'email': 'validemail@g.com', 'handle_str': 'validnamevalidname', 'name_first': 'validname', 'name_last': 'validname', ...}, {'email': 'dan@gmail.com', 'handle_str': 'dansmith', 'name_first': 'dan', 'name_last': 'smith', ...}]}
E         Use -v to get the full diff

http_tests/dm_http_test.py:109: AssertionError
______________________________ test_dm_list_valid ______________________________

clear_data = None
test_user1 = {'auth_user_id': 220, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIyMCwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImQyNDMwYjViLTA4N2EtNDczYy1iMjE0LWEwZGJlNTNjZGM5MiJ9.x2YzzexsmK_n7Y6PWZAL79X8NUoNjXlpYvwfRTKYkkk'}
test_user2 = {'auth_user_id': 221, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIyMSwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImYyNTRjMzA4LTYyMDAtNDFkMi04OTI2LTNkNGExZWFhOTViNyJ9.gGeDJAj2yVw8Jvl0jsxaMTUk_r_hcLRHI_8ad-C_HR4'}
test_create_dm = {'dm_id': 222, 'dm_name': 'dansmith, validnamevalidname'}

    def test_dm_list_valid(clear_data, test_user1, test_user2, test_create_dm):
        dm_list = requests.get(f"{config.url}dm/list/v1?token={test_user1['token']}")
        dm_info = dm_list.json()
>       assert dm_info == expected_output_list_v1()
E       AssertionError: assert {'dms': [{'dm...evalidname'}]} == {'dms': [{'dm...evalidname'}]}
E         Differing items:
E         {'dms': [{'dm_id': 222, 'name': 'dansmith, validnamevalidname'}]} != {'dms': [{'dm_id': 1, 'name': 'dansmith, validnamevalidname'}]}
E         Use -v to get the full diff

http_tests/dm_http_test.py:138: AssertionError
_________________________ test_dm_create_invalid_u_id __________________________

clear_data = None
test_user1 = {'auth_user_id': 225, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIyNSwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImE3ZDI4ZWNkLTBiYjMtNDRlYS05MTkzLTY5N2QwYzYyYTZkOSJ9.LPgfhgYzP2yusMAkVZM7pItO6TjhxaIEaztQguNzFRQ'}
test_user2 = {'auth_user_id': 226, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIyNiwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjQwYjI2YzMyLTQyZjMtNGIyYy1hMGU5LTYwNTdjYWE2N2NhZCJ9.Ww2UXyDeG2vDf7LOuYUb50ngw0_3oebyiaQAiRnt4Wo'}

    def test_dm_create_invalid_u_id(clear_data,test_user1, test_user2):
        dm = requests.post(config.url + 'dm/create/v1', json={
            'token': test_user1['token'],
            'u_ids': [INVALID_U_ID]
        })
>       assert dm.status_code == ACCESSERROR
E       assert 400 == 403
E        +  where 400 = <Response [400]>.status_code

http_tests/dm_http_test.py:164: AssertionError
_____________________________ test_dm_create_valid _____________________________

clear_data = None
test_user1 = {'auth_user_id': 227, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIyNywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImU4YjI4ODQ0LTVhZjItNDM5Yy1hYTg2LTJjMDQyYWZkNzAwYiJ9.mk94EcvQXaeetfGzXBRmGtZgJd9s9-cajBnUyT52iLE'}
test_user2 = {'auth_user_id': 228, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIyOCwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImU3ZTJhZWQ0LWQ4MGYtNDk0MC1hMjg3LTkzMTI1ZTI4ZWM5NiJ9.UtpPoRp59gDtMW93aWK23Yodg8ojEbehi4HD63ivV5U'}

    def test_dm_create_valid(clear_data,test_user1, test_user2):
        dm = requests.post(config.url + 'dm/create/v1', json={
            'token': test_user1['token'],
            'u_ids': [test_user2['auth_user_id']]
        })
        dm_info = dm.json()
>       assert dm_info == expected_output_create_v1()
E       AssertionError: assert {'dm_id': 229...amevalidname'} == {'dm_id': 1, ...amevalidname'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'dm_id': 229} != {'dm_id': 1}
E         Use -v to get the full diff

http_tests/dm_http_test.py:173: AssertionError
_______________________ test_dm_invite_user_not_a_member _______________________

clear_data = None
test_user1 = {'auth_user_id': 236, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIzNiwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjQ4YWZjZDY2LWJkZDYtNDhhMi1iYjY4LTZlZmM3MDNjNjFkZSJ9.ZhMlMbGHZ7HVT9d5f5VUgJfy8GLc8I--0q-kExpdSDc'}
test_user2 = {'auth_user_id': 237, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIzNywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjdiMmViZDdlLThlZTYtNGY0Yi1hMjRmLTYwYjk0NGUyYzIzMCJ9.T8O3oFpGb2WKopoodFwM6pMYeW7FMTF_yZVHv695Ebw'}
test_user3 = {'auth_user_id': 238, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIzOCwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImYzMTRjNGFiLTA0ZjQtNDQ0ZS04ZWNjLWY5ZjkwODcxMmVkZiJ9.xkwUaEVzo2kp83LatYGSWFiRxp7uorWKaHMtJAZ1Ijg'}
test_create_dm = {'dm_id': 239, 'dm_name': 'dansmith, validnamevalidname'}

    def test_dm_invite_user_not_a_member(clear_data,test_user1,test_user2,test_user3,test_create_dm):
        dm_inv = requests.post(config.url + 'dm/invite/v1', json={
            'token': test_user3['token'],
            'dm_id': test_create_dm['dm_id'],
            'u_id': test_user2['auth_user_id']
        })
>       assert dm_inv.status_code == ACCESSERROR
E       assert 400 == 403
E        +  where 400 = <Response [400]>.status_code

http_tests/dm_http_test.py:200: AssertionError
_________________________ test_dm_invite_already_in_dm _________________________

clear_data = None
test_user1 = {'auth_user_id': 243, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI0MywibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6IjlkMTBiNjJhLWFlMzItNDU2NC1iMDYxLTEzYWE1MGQ1ZmM5MSJ9._mx-ZMuP2WSXtjjanIbQDSnsLgj8Vh9Ot29QK99DL8Y'}
test_user2 = {'auth_user_id': 244, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI0NCwibG9naW5fdGltZSI6MTYxODI1NDc1Miwic2FsdCI6ImQ4MjVjZDlkLWM4YzYtNDUyMy1hNWY2LWVmZTM0YTRhN2QyYiJ9.0moLVvg5YRXJme8SddKSvepC6hlZRyfbCSkpzmXfays'}
test_create_dm = {'dm_id': 245, 'dm_name': 'dansmith, validnamevalidname'}

    def test_dm_invite_already_in_dm(clear_data,test_user1,test_user2,test_create_dm):
        dm_inv = requests.post(config.url + 'dm/invite/v1', json={
            'token': test_user1['token'],
            'dm_id': test_create_dm['dm_id'],
            'u_id': test_user2['auth_user_id']
        })
>       assert dm_inv.json()== {}

http_tests/dm_http_test.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f0fd69fabe0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>dansmith is already a member of dansmith, validnamevalidname</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f0fd7781c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________ test_dm_messages_valid_single _________________________

clear_data = None
test_create_dm = {'dm_id': 281, 'dm_name': 'dansmith, validnamevalidname'}
test_user1 = {'auth_user_id': 279, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3OSwibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6IjQwM2VmZjc0LTA0MjMtNDFiNi05NjYwLTMzNWQwYjA3OWNkOCJ9.cK38EAs_Z9EjFLOSAOencxFEQHBE8URlltNac5B2KQA'}
test_user2 = {'auth_user_id': 280, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4MCwibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6IjA3M2ZjMzY2LTJiMTEtNGFlNy04YzY4LWQ1MTBkZTFjODA0NCJ9.RbMO7tAveEk2ZNABuAlxo8HJcYL78cUOCpsrfq_jiL8'}

    def test_dm_messages_valid_single(clear_data,test_create_dm,test_user1,test_user2):
        requests.post(config.url + 'message/senddm/v1', json={
            'token': test_user1['token'],
            'dm_id': test_create_dm['dm_id'],
            'message': 'singlemessage'
        })
    
        msg = requests.get(f"{config.url}dm/messages/v1?token={test_user1['token']}&dm_id={test_create_dm['dm_id']}&start=0")
        message_detail = msg.json()
        print(message_detail)
>       assert message_detail['messages'][0]['message_id'] == 1
E       assert 282 == 1

http_tests/dm_http_test.py:308: AssertionError
----------------------------- Captured stdout call -----------------------------
{'end': -1, 'messages': [{'is_pinned': False, 'message': 'singlemessage', 'message_id': 282, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], 'time_created': 1618254753, 'u_id': 279}], 'start': 0}
__________________________ test_dm_messages_multiple ___________________________

clear_data = None
test_create_dm = {'dm_id': 285, 'dm_name': 'dansmith, validnamevalidname'}
test_user1 = {'auth_user_id': 283, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4MywibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6IjgzZjNhZTE3LTVjZTMtNDA2Zi1hYmYzLWM0NjRjZDgzZDYwNiJ9.l23itoHn9FyuZXgu48STVV6SMOqLBkjaVp7XUwThZuE'}
test_user2 = {'auth_user_id': 284, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4NCwibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6ImNiNTM3ZWU0LTJiMWEtNGNiMS1hNDZkLWMyNjNlZDQxY2Q3OSJ9.eGomo20FU9mZ2ExJ4256gbx6mNNS_7TIbx4BNdp0yOA'}

    def test_dm_messages_multiple(clear_data,test_create_dm,test_user1,test_user2):
        i = 1
        while i <= 55:
            requests.post(config.url + 'message/senddm/v1',json={
                'token':test_user1['token'],
                'dm_id':test_create_dm['dm_id'],
                'message':f"{i}"
            })
            i += 1
        msg = requests.get(f"{config.url}dm/messages/v1?token={test_user1['token']}&dm_id={test_create_dm['dm_id']}&start=2")
        message_detail = msg.json()
    
        i = 53
        j = 0
        while i >= 4:
>           assert message_detail['messages'][j]['message_id'] == i
E           assert 338 == 53

http_tests/dm_http_test.py:329: AssertionError
__________________________________ test_echo ___________________________________

    def test_echo():
        '''
        A simple test to check echo
        '''
        resp = requests.get(config.url + 'echo', params={'data': 'hello'})
>       assert json.loads(resp.text) == {'data': 'hello'}

http_tests/echo_http_test.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f0fd7da60b8>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
_______________________ test_message_send_empty_message ________________________

clear_database = None
user_1 = {'auth_user_id': 367, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM2NywibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6IjE0NTNhNjdhLTNiZTEtNDRkMy1hZjE0LWUyMzY2ODQ4MjRiZSJ9.XjEtJgq1lIqFhscI1N8YyM9jQ4InbTioPjG15MMsuj4'}
channel_1 = 368

    def test_message_send_empty_message(clear_database, user_1, channel_1):
    
        msg = requests.post(config.url + 'message/send/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'message': '        '
        })
>       assert msg.status_code == INPUTERROR
E       assert 200 == 400
E        +  where 200 = <Response [200]>.status_code

http_tests/message_http_test.py:148: AssertionError
___________________________ test_message_send_single ___________________________

clear_database = None
user_1 = {'auth_user_id': 370, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM3MCwibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6ImIzZmE1NDRlLWI5MDYtNGNiNC05NWQ0LWY4M2FjZmVhOTA1OSJ9.Hr1_LZlaycfj4lVYvM39KVfNk9tPL3TxlAOXwJnp9e0'}
channel_1 = 371

    def test_message_send_single(clear_database, user_1, channel_1):
    
        requests.post(config.url + 'message/send/v2', json={
            'token': user_1['token'],
            'channel_id': channel_1,
            'message': 'Hi Channel'
        })
        channel_msg = requests.get(f"{config.url}channel/messages/v2?token={user_1['token']}&channel_id={channel_1}&start=0")
        msg_info = channel_msg.json()['messages']
        assert len(msg_info) == 1
>       assert msg_info[0]['message_id'] == 1
E       assert 372 == 1

http_tests/message_http_test.py:160: AssertionError
________________________ test_message_send_joined_user _________________________

clear_database = None
user_1 = {'auth_user_id': 373, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM3MywibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6IjU2ZTU0NWE0LTI4ODQtNDEwOC04ZTBiLWRmZjU2ZDM4MjVlZSJ9.NRsbCybc9xB-CUYmUB_eWc5tn2ShXej2NyfTWfSwiQM'}
user_2 = {'auth_user_id': 374, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM3NCwibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6ImM0N2E1NjNjLTdjMDctNGIwNC04ZmI2LTQwYjMxMzI4ODRmNyJ9.VJSUISZc3OGtiv3mNOTM6eLOgjUXrg-nFg1hbVzIQ1Q'}
channel_1 = 375

    def test_message_send_joined_user(clear_database, user_1, user_2, channel_1):
    
        requests.post(config.url + 'channel/join/v2', json={
            'token': user_2['token'],
            'channel_id': channel_1
        })
        requests.post(config.url + 'message/send/v2', json={
            'token': user_2['token'],
            'channel_id': channel_1,
            'message': 'I just joined!!'
        })
        channel_msg = requests.get(f"{config.url}channel/messages/v2?token={user_2['token']}&channel_id={channel_1}&start=0")
        msg_info = channel_msg.json()['messages']
        assert len(msg_info) == 1
>       assert msg_info[0]['message_id'] == 1
E       assert 376 == 1

http_tests/message_http_test.py:178: AssertionError
___________________________ test_message_edit_empty ____________________________

clear_database = None
user_1 = {'auth_user_id': 397, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM5NywibG9naW5fdGltZSI6MTYxODI1NDc1Mywic2FsdCI6IjEyNDYwOTI2LTE1NTYtNDdkZC04YjhkLTUzN2RlNjViZGMwZCJ9.IzUGmHweb-naq_B5JQAt8VnNZGkx05qHINhb5hpw8ow'}
dm_1 = 398, message_2 = 399

    def test_message_edit_empty(clear_database, user_1, dm_1, message_2):
    
        requests.put(config.url + 'message/edit/v2', json={
            'token': user_1['token'],
            'message_id': message_2,
            'message': '      '
        })
        dm_msg = requests.get(f"{config.url}dm/messages/v1?token={user_1['token']}&dm_id={dm_1}&start=0")
        msg_list = dm_msg.json()
>       assert msg_list == {'messages': [], 'start': 0, 'end': -1}
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '      ', 'message_id': 399, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': []}
E         Use -v to get the full diff

http_tests/message_http_test.py:259: AssertionError
______________________ test_message_share_simple_optional ______________________

clear_database = None
user_1 = {'auth_user_id': 466, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ2NiwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjYzMTg1NjQ1LTE3MDctNGU1OC05ODI3LTUzYzNjODFjMmE3NSJ9.k9Kd4ivAEO_vJK2Kag_LpCaWEqDMavvONZr4NVNFpGw'}
channel_1 = 467, dm_1 = 468, message_1 = 469

    def test_message_share_simple_optional(clear_database, user_1, channel_1, dm_1, message_1):
    
        requests.post(config.url + 'message/share/v1', json={
            'token': user_1['token'],
            'og_message_id': message_1,
            'message': 'Hi everyone!!!',
            'channel_id': -1,
            'dm_id': dm_1
        })
        dm_msg = requests.get(f"{config.url}dm/messages/v1?token={user_1['token']}&dm_id={dm_1}&start=0")
        dm_msg_info = dm_msg.json()['messages']
        assert len(dm_msg_info) == 1
>       assert dm_msg_info[0]['message'] == 'Hello World Hi everyone!!!'
E       assert 'Hi everyone!...lo World\n"""' == 'Hello World Hi everyone!!!'
E         - Hello World Hi everyone!!!
E         + Hi everyone!!!
E         + 
E         + """
E         + Hello World
E         + """

http_tests/message_http_test.py:534: AssertionError
______________________ test_message_senddm_empty_message _______________________

clear_database = None
user_1 = {'auth_user_id': 480, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ4MCwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjYyYWNjYTU2LTYyNGYtNGUyOS1iMTNkLTYyNTk0MDFhYjM2MyJ9.V7kGCNpHQb1116eHj06QBzya43RtHLIgPNSS0MtGNLk'}
dm_1 = 481

    def test_message_senddm_empty_message(clear_database, user_1, dm_1):
    
        msg = requests.post(config.url + 'message/senddm/v1', json={
            'token': user_1['token'],
            'dm_id': dm_1,
            'message': '  \n \t  '
        })
>       assert msg.status_code == INPUTERROR
E       assert 200 == 400
E        +  where 200 = <Response [200]>.status_code

http_tests/message_http_test.py:589: AssertionError
__________________________ test_message_senddm_single __________________________

clear_database = None
user_1 = {'auth_user_id': 483, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ4MywibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjA0YmU3ZTlhLWY2N2ItNDU1MC1hOTgzLTBjZGFkMDQ5NTVkOSJ9.q4_FrDyz187mxjNRAdiUfEP9hnAshB7Mm_clgHjOHlM'}
dm_1 = 484

    def test_message_senddm_single(clear_database, user_1, dm_1):
    
        requests.post(config.url + 'message/senddm/v1', json={
            'token': user_1['token'],
            'dm_id': dm_1,
            'message': 'Hi dm!!!'
        })
        dm_msg = requests.get(f"{config.url}dm/messages/v1?token={user_1['token']}&dm_id={dm_1}&start=0")
        msg_info = dm_msg.json()['messages']
        assert len(msg_info) == 1
>       assert msg_info[0]['message_id'] == 1
E       assert 485 == 1

http_tests/message_http_test.py:601: AssertionError
_______________________ test_message_senddm_invited_user _______________________

clear_database = None
user_1 = {'auth_user_id': 486, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ4NiwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjBiMzQ4OGI4LTE5ZjctNDYwMS1hNjM2LTllNzI2YTQ5NzBmYSJ9.GtIp_t3od9n_Uzvf9HD_6Ck6haQBMGgJDAbT8hxL0Jc'}
user_2 = {'auth_user_id': 487, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ4NywibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6ImJmZDM3MTdmLTliMTAtNGQxNi1hNGNiLTFkODMyZDAwMGNiNyJ9.aN-5HejcHFvLeaoG_x1baso8WegTat88AVg3NY1aQBE'}
dm_1 = 488, dm_2 = 489

    def test_message_senddm_invited_user(clear_database, user_1, user_2, dm_1, dm_2):
    
        requests.post(config.url + 'dm/invite/v1', json={
            'token': user_2['token'],
            'dm_id': dm_2,
            'u_id': user_1['auth_user_id']
        })
        requests.post(config.url + 'message/senddm/v1', json={
            'token': user_1['token'],
            'dm_id': dm_2,
            'message': 'Thanks for the invite!'
        })
        requests.post(config.url + 'message/senddm/v1', json={
            'token': user_2['token'],
            'dm_id': dm_2,
            'message': 'No worries mate!'
        })
        dm_msg = requests.get(f"{config.url}dm/messages/v1?token={user_1['token']}&dm_id={dm_2}&start=0")
        msg_info = dm_msg.json()['messages']
        assert len(msg_info) == 2
>       assert msg_info[0]['message_id'] == 2
E       assert 491 == 2

http_tests/message_http_test.py:625: AssertionError
________________________ test_other_search_valid_inputs ________________________

clear_database = None
user_1 = {'auth_user_id': 498, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ5OCwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjE4NTg4MzRkLTkxYTYtNGVjZC1hNGMzLThlMDhjMWFlMDAxYSJ9.2tb1VqCscn_h3Lq1IyQ5oM9-Q1qAluoDgxx1dMtQE4M'}
user_2 = {'auth_user_id': 499, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ5OSwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjJhYWU2ZjJmLWZkMzAtNGY5ZC04ODY0LWNlOTliOTE1MWM3ZiJ9.nJllloCXvpaqRdjEnUKcotFeGX5chUpWxAuvhLFBOKM'}
user_3 = {'auth_user_id': 500, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUwMCwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjI4MTJjZGY2LTFkYzAtNGQ5NS1iYmVmLTQ2MjIwOTg4MmUzOSJ9.DTROAdl0mgEXjZdQCNUzFlI6pU2MuJrhZNDPKlNWJKU'}
channel_1 = 501, channel_2 = 502, dm_1 = 503, dm_2 = 504

    def test_other_search_valid_inputs(clear_database, user_1, user_2, user_3, channel_1, channel_2, dm_1, dm_2):
        send_channel_message(user_1['token'], channel_1, MIXED_QUERY_STR)
        send_dm_message(user_1['token'], dm_1, MIXED_QUERY_STR)
        send_channel_message(user_1['token'], channel_1, UPPER_CASE_STR)
        send_channel_message(user_2['token'], channel_2, SUB_STR)
        send_dm_message(user_2['token'], dm_2, UPPER_CASE_STR)
        send_dm_message(user_2['token'], dm_2, MIXED_QUERY_STR)
        send_dm_message(user_3['token'], dm_2, MIXED_QUERY_STR)
        search_json = requests.get(f"{config.url}search/v2?token={user_2['token']}&query_str={SUB_STR}")
        search = search_json.json()
        messages = search['messages']
>       assert messages[0]['message_id'] == 2
E       assert 506 == 2

http_tests/other_http_test.py:164: AssertionError
____________________ test_notifications_get_share_dm_invite ____________________

clear_database = None
user_1 = {'auth_user_id': 514, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUxNCwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6ImU1NTYxZjdkLTA1ZjItNDVkNi1hNjJjLWIxZDIyYjQzZTc0YSJ9.0iNGMLkQoSeKlFEQwrS1oduCwneZVw4M2upYPZzuuPk'}
user_2 = {'auth_user_id': 515, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUxNSwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6IjlmMzA1N2UzLTAzM2UtNDdjMi1iOWUzLTE2OTY1MGJhYTE4NyJ9.N67WpSbU7HUOpOkZBFCAMx8bYRGstTOMinmoFxKv0xo'}
user_3 = {'auth_user_id': 516, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUxNiwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6ImRmN2VjYTMzLTgwNmMtNDQ5Ni1iOGMwLTZjMjRlYTM2NWYyNCJ9.qzvua5nn7GP2BJ6Njxb8Nsx0iYIuD4NHgQzT1Mieh-c'}
dm_2 = 517

    def test_notifications_get_share_dm_invite(clear_database, user_1, user_2, user_3, dm_2):
    
        requests.post(config.url + 'dm/invite/v1', json={
            'token': user_3['token'],
            'dm_id': dm_2,
            'u_id': user_1['auth_user_id']
        })
        msg = requests.post(config.url + 'message/senddm/v1', json={
            'token': user_2['token'],
            'dm_id': dm_2,
            'message': 'Hello @johnsmith and @terrancenguyen'
        })
        msg_info = msg.json()
        requests.post(config.url + 'message/share/v1', json={
            'token': user_2['token'],
            'og_message_id': msg_info['message_id'],
            'message': "And I'll tag myself too @philiptran",
            'channel_id': -1,
            'dm_id': dm_2
        })
        notif_1 = requests.get(f"{config.url}notifications/get/v1?token={user_1['token']}")
        notif_1_info = notif_1.json()['notifications']
>       assert len(notif_1_info) == 3
E       AssertionError: assert 2 == 3
E        +  where 2 = len([{'channel_id': -1, 'dm_id': 517, 'notification_message': 'philiptran tagged you in philiptran, terrancenguyen: Hello ...'}, {'channel_id': -1, 'dm_id': 517, 'notification_message': 'terrancenguyen added you to philiptran, terrancenguyen'}])

http_tests/other_http_test.py:217: AssertionError
_____________________________ test_simple_profile ______________________________

clear_database = None
user_1 = {'auth_user_id': 520, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUyMCwibG9naW5fdGltZSI6MTYxODI1NDc1NCwic2FsdCI6ImUwYTRhMjFkLTE2N2EtNGQyNi1iYzRkLTI1ZjJhYzYwMDliNCJ9.aUd-SFm0jzaCc2Sl6VcoHn18BfDSyrX2IiNbB1U2I_M'}

    def test_simple_profile(clear_database, user_1):
        profile_json = requests.get(f"{config.url}user/profile/v2?token={user_1['token']}&u_id={user_1['auth_user_id']}")
        profile = profile_json.json()
>       assert profile == expected_output_user1_profile()
E       AssertionError: assert {'user': {'em...'Smith', ...}} == {'user': {'em...'Smith', ...}}
E         Differing items:
E         {'user': {'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ...}} != {'user': {'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ...}}
E         Use -v to get the full diff

http_tests/user_http_test.py:77: AssertionError
________________________________ test_user_func ________________________________

clear_database = None
user_1 = {'auth_user_id': 534, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUzNCwibG9naW5fdGltZSI6MTYxODI1NDc1NSwic2FsdCI6IjU5NjkyMWQ2LTAxZDQtNDRmMC1hNzIyLTViYjg0MDA5NWE5ZCJ9.ObB9AO78iKA7b_MMPfO5fRw9K6nsEWG6y-24Jr5wxPw'}

    def test_user_func(clear_database, user_1):
        set_email(user_1['token'], "mynewemail@gmail.com")
        set_name(user_1['token'], "Daniel", "Nguyen")
        set_handle(user_1['token'], "totallyoriginalhandl")
    
        profile_json = requests.get(f"{config.url}user/profile/v2?token={user_1['token']}&u_id={user_1['auth_user_id']}")
        profile = profile_json.json()
>       assert profile == expected_output_user1_profilev2()
E       AssertionError: assert {'user': {'em...Nguyen', ...}} == {'user': {'em...Nguyen', ...}}
E         Differing items:
E         {'user': {'email': 'mynewemail@gmail.com', 'handle_str': 'totallyoriginalhandl', 'name_first': 'Daniel', 'name_last': 'Nguyen', ...}} != {'user': {'email': 'mynewemail@gmail.com', 'handle_str': 'totallyoriginalhandl', 'name_first': 'Daniel', 'name_last': 'Nguyen', ...}}
E         Use -v to get the full diff

http_tests/user_http_test.py:214: AssertionError
________________________________ test_all_valid ________________________________

clear_database = None
user_1 = {'auth_user_id': 541, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0MSwibG9naW5fdGltZSI6MTYxODI1NDc1NSwic2FsdCI6ImI4ODc5Yjc3LWI5OGUtNGUyZi05OTNhLTUyMDVlNzRjODM3ZCJ9.FGtd4ndkREimAxb_gv_RSz5uJ6PJL92BLR0LmGFJLLI'}
user_2 = {'auth_user_id': 542, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0MiwibG9naW5fdGltZSI6MTYxODI1NDc1NSwic2FsdCI6IjUzNzExMDc4LTA0MTctNDcyZC05MTNjLTE4ZTczYzgxMWYzZCJ9.EidXQBjXT2Y97UPhYXIzzVW7mZQJCrV5yu5PpcLjTKE'}
user_3 = {'auth_user_id': 543, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0MywibG9naW5fdGltZSI6MTYxODI1NDc1NSwic2FsdCI6ImU2NzA3MjY1LWU4MjctNDBjZS1hZGZhLTFiYjVjODRlOGJkYiJ9.J8nYat0kIc29fQ61OH3cO4wmSqj2H4OdyrwpTg2wTgc'}

    def test_all_valid(clear_database, user_1, user_2, user_3):
        all_profiles_json = requests.get(f"{config.url}users/all/v1?token={user_1['token']}")
        all_profiles = all_profiles_json.json()
>       assert all_profiles == expected_output_all_users()
E       AssertionError: assert {'users': [{'...guyen', ...}]} == {'users': [{'...guyen', ...}]}
E         Differing items:
E         {'users': [{'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ......mail': 'terrynguyen@gmail.com', 'handle_str': 'terrancenguyen', 'name_first': 'Terrance', 'name_last': 'Nguyen', ...}]} != {'users': [{'email': 'johnsmith@gmail.com', 'handle_str': 'johnsmith', 'name_first': 'John', 'name_last': 'Smith', ......mail': 'terrynguyen@gmail.com', 'handle_str': 'terrancenguyen', 'name_first': 'Terrance', 'name_last': 'Nguyen', ...}]}
E         Use -v to get the full diff

http_tests/users_http_test.py:84: AssertionError
=========================== short test summary info ============================
FAILED http_tests/admin_http_test.py::test_admin_user_remove_valid - Assertio...
FAILED http_tests/auth_http_test.py::test_register_multiple_users - Assertion...
FAILED http_tests/auth_http_test.py::test_login_valid - assert 26 == 1
FAILED http_tests/auth_http_test.py::test_auth_logout_invalid_token - assert ...
FAILED http_tests/auth_http_test.py::test_auth_logout_again - assert 200 == 403
FAILED http_tests/channel_http_test.py::test_invite_duplicate_uid - assert 51...
FAILED http_tests/channel_http_test.py::test_invite_valid_inputs - assert 53 ...
FAILED http_tests/channel_http_test.py::test_invite_global_owner_allowed - As...
FAILED http_tests/channel_http_test.py::test_invite_global_owner_invited - as...
FAILED http_tests/channel_http_test.py::test_channel_details_owner_allowed - ...
FAILED http_tests/channel_http_test.py::test_channel_details_member_allowed
FAILED http_tests/channel_http_test.py::test_channel_details_global_owner_allowed
FAILED http_tests/channel_http_test.py::test_channel_details_new_channel - As...
FAILED http_tests/channel_http_test.py::test_channel_details_empty_channel - ...
FAILED http_tests/channel_http_test.py::test_channel_addowner_invalid_uid - a...
FAILED http_tests/channel_http_test.py::test_channel_addowner_global_owner_allowed
FAILED http_tests/channel_http_test.py::test_channel_addowner_valid_inputs - ...
FAILED http_tests/channel_http_test.py::test_channel_removeowner_invalid_auth_id
FAILED http_tests/channel_http_test.py::test_channel_removeowner_invalid_uid
FAILED http_tests/channel_http_test.py::test_channel_removeowner_auth_id_not_owner
FAILED http_tests/channel_http_test.py::test_channel_removeowner_valid_inputs
FAILED http_tests/channel_http_test.py::test_channel_removeowner_global_owner_allowed
FAILED http_tests/channel_http_test.py::test_channel_leave_member - assert 14...
FAILED http_tests/channel_http_test.py::test_channel_leave_owner - AssertionE...
FAILED http_tests/channel_http_test.py::test_channel_leave_last_user - simple...
FAILED http_tests/channel_http_test.py::test_channel_join_already_joined - si...
FAILED http_tests/channel_http_test.py::test_channel_messages_join - assert 1...
FAILED http_tests/channels_http_test.py::test_channel_listall_valid - Asserti...
FAILED http_tests/channels_http_test.py::test_channel_list_valid - AssertionE...
FAILED http_tests/channels_http_test.py::test_valid_channels_create_v1_u_id
FAILED http_tests/dm_http_test.py::test_dm_details_valid - AssertionError: as...
FAILED http_tests/dm_http_test.py::test_dm_list_valid - AssertionError: asser...
FAILED http_tests/dm_http_test.py::test_dm_create_invalid_u_id - assert 400 =...
FAILED http_tests/dm_http_test.py::test_dm_create_valid - AssertionError: ass...
FAILED http_tests/dm_http_test.py::test_dm_invite_user_not_a_member - assert ...
FAILED http_tests/dm_http_test.py::test_dm_invite_already_in_dm - simplejson....
FAILED http_tests/dm_http_test.py::test_dm_messages_valid_single - assert 282...
FAILED http_tests/dm_http_test.py::test_dm_messages_multiple - assert 338 == 53
FAILED http_tests/echo_http_test.py::test_echo - json.decoder.JSONDecodeError...
FAILED http_tests/message_http_test.py::test_message_send_empty_message - ass...
FAILED http_tests/message_http_test.py::test_message_send_single - assert 372...
FAILED http_tests/message_http_test.py::test_message_send_joined_user - asser...
FAILED http_tests/message_http_test.py::test_message_edit_empty - AssertionEr...
FAILED http_tests/message_http_test.py::test_message_share_simple_optional - ...
FAILED http_tests/message_http_test.py::test_message_senddm_empty_message - a...
FAILED http_tests/message_http_test.py::test_message_senddm_single - assert 4...
FAILED http_tests/message_http_test.py::test_message_senddm_invited_user - as...
FAILED http_tests/other_http_test.py::test_other_search_valid_inputs - assert...
FAILED http_tests/other_http_test.py::test_notifications_get_share_dm_invite
FAILED http_tests/user_http_test.py::test_simple_profile - AssertionError: as...
FAILED http_tests/user_http_test.py::test_user_func - AssertionError: assert ...
FAILED http_tests/users_http_test.py::test_all_valid - AssertionError: assert...
======================== 52 failed, 360 passed in 7.90s ========================
